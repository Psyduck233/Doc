# 有 cutline 时使用的提示词
TABLE_PROMPT_WITH_CUTLINE = """
这是表格“{cutline}”，先判断这个表格是否与电子器件的电气参数有关；
如果有关，请读取表格中的参数数据，如果出现多条件下的参数，请将条件在 "参数名称" 字段中说明，将不同条件下的参数键值对依次输出，避免使用数组结构；
请严格按照以下 JSON 格式输出，不要输出额外的说明：

```json
{
  "Parameters": {
    "参数名称1": "参数值1",
    "参数名称2": "参数值2",
    ...
  }
}
```

如果无关，请严格按照以下 JSON 格式输出，不要输出额外的说明：

```json
{
  "Parameters": {
  }
}
```

注意：
1. 所有数字必须补齐前导 0，例如 0.79（不能写作 .79）；
2. 参数名不能包含 Unicode 转义字符（如 \\u3b3opt），请直接用英文或拉丁字母拼写；
3. 最终输出必须是合法、完整的 JSON 字符串。
"""

# 无 cutline 时备用通用提示词
TABLE_PROMPT_DEFAULT = """
请阅读这张表格，先判断这个表格是否与电子器件的电气参数有关；
如果有关，请读取表格中的参数数据，如果出现多条件下的参数，请将条件写在参数名称的键名中，将不同条件下的参数键值对依次输出，避免使用数组结构；
请严格按照以下 JSON 格式输出，不要输出额外的说明：

```json
{
  "Parameters": {
    "参数名称1": "参数值1",
    "参数名称2": "参数值2",
    ...
  }
}
```

如果无关，请严格按照以下 JSON 格式输出，不要输出额外的说明：

```json
{
  "Parameters": {
  }
}
```

注意：
1. 所有数字必须补齐前导 0，例如 0.79（不能写作 .79）；
2. 参数名不能包含 Unicode 转义字符（如 \\u3b3opt），请直接用英文或拉丁字母拼写；
3. 最终输出必须是合法、完整的 JSON 字符串，采用标准的键值对。
4. JSON 格式要求每个键值对之间必须用冒号 : 分隔，且字符串值不能包含不正确的分号或其他符号。
5. 确保每个参数的值是一个清晰的字符串，而不是带有多重描述和分号的复杂字符串。
6. 键值必须清晰，不能生成特殊字符。
"""
